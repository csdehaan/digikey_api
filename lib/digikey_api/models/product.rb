=begin
#ProductSearch Api

#ProductSearch Api

OpenAPI spec version: v4
Contact: dl_Agile_Team_B2B_API@digikey.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.43

=end

require 'date'

module DigiKey
  # Product info
  class Product
    attr_accessor :description

    attr_accessor :manufacturer

    # The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for different parts.
    attr_accessor :manufacturer_product_number

    # The price for a single unit of this product.
    attr_accessor :unit_price

    # Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values.
    attr_accessor :product_url

    # The URL to the product's datasheet.
    attr_accessor :datasheet_url

    # The URL to the product's image.
    attr_accessor :photo_url

    attr_accessor :product_variations

    # The sum of the quantity for all package types that are found in ProductVariations.
    attr_accessor :quantity_available

    attr_accessor :product_status

    # True if back order is not allowed for this product
    attr_accessor :back_order_not_allowed

    # Indicates if a product is normally stocked.
    attr_accessor :normally_stocking

    # This product is no longer sold at Digi-Key and will no longer be stocked.
    attr_accessor :discontinued

    # This product is no longer manufactured and will no longer be stocked once stock is depleted.
    attr_accessor :end_of_life

    # Is product non-cancellable and non-returnable
    attr_accessor :ncnr

    # The URL to the product's video
    attr_accessor :primary_video_url

    attr_accessor :parameters

    attr_accessor :base_product_number

    attr_accessor :category

    # Last date that the product will be available for purchase. Date is in ISO 8601.
    attr_accessor :date_last_buy_chance

    # The number of weeks expected to receive stock from manufacturer.
    attr_accessor :manufacturer_lead_weeks

    # Quantity of this product available to order from manufacturer.
    attr_accessor :manufacturer_public_quantity

    attr_accessor :series

    # Additional shipping information - if available
    attr_accessor :shipping_info

    attr_accessor :classifications

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'description' => :'Description',
        :'manufacturer' => :'Manufacturer',
        :'manufacturer_product_number' => :'ManufacturerProductNumber',
        :'unit_price' => :'UnitPrice',
        :'product_url' => :'ProductUrl',
        :'datasheet_url' => :'DatasheetUrl',
        :'photo_url' => :'PhotoUrl',
        :'product_variations' => :'ProductVariations',
        :'quantity_available' => :'QuantityAvailable',
        :'product_status' => :'ProductStatus',
        :'back_order_not_allowed' => :'BackOrderNotAllowed',
        :'normally_stocking' => :'NormallyStocking',
        :'discontinued' => :'Discontinued',
        :'end_of_life' => :'EndOfLife',
        :'ncnr' => :'Ncnr',
        :'primary_video_url' => :'PrimaryVideoUrl',
        :'parameters' => :'Parameters',
        :'base_product_number' => :'BaseProductNumber',
        :'category' => :'Category',
        :'date_last_buy_chance' => :'DateLastBuyChance',
        :'manufacturer_lead_weeks' => :'ManufacturerLeadWeeks',
        :'manufacturer_public_quantity' => :'ManufacturerPublicQuantity',
        :'series' => :'Series',
        :'shipping_info' => :'ShippingInfo',
        :'classifications' => :'Classifications'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'description' => :'Description',
        :'manufacturer' => :'Manufacturer',
        :'manufacturer_product_number' => :'String',
        :'unit_price' => :'Float',
        :'product_url' => :'String',
        :'datasheet_url' => :'String',
        :'photo_url' => :'String',
        :'product_variations' => :'Array<ProductVariation>',
        :'quantity_available' => :'Integer',
        :'product_status' => :'ProductStatusV4',
        :'back_order_not_allowed' => :'BOOLEAN',
        :'normally_stocking' => :'BOOLEAN',
        :'discontinued' => :'BOOLEAN',
        :'end_of_life' => :'BOOLEAN',
        :'ncnr' => :'BOOLEAN',
        :'primary_video_url' => :'String',
        :'parameters' => :'Array<ParameterValue>',
        :'base_product_number' => :'BaseProduct',
        :'category' => :'CategoryNode',
        :'date_last_buy_chance' => :'DateTime',
        :'manufacturer_lead_weeks' => :'String',
        :'manufacturer_public_quantity' => :'Integer',
        :'series' => :'Series',
        :'shipping_info' => :'String',
        :'classifications' => :'Classifications'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'Description')
        self.description = attributes[:'Description']
      end

      if attributes.has_key?(:'Manufacturer')
        self.manufacturer = attributes[:'Manufacturer']
      end

      if attributes.has_key?(:'ManufacturerProductNumber')
        self.manufacturer_product_number = attributes[:'ManufacturerProductNumber']
      end

      if attributes.has_key?(:'UnitPrice')
        self.unit_price = attributes[:'UnitPrice']
      end

      if attributes.has_key?(:'ProductUrl')
        self.product_url = attributes[:'ProductUrl']
      end

      if attributes.has_key?(:'DatasheetUrl')
        self.datasheet_url = attributes[:'DatasheetUrl']
      end

      if attributes.has_key?(:'PhotoUrl')
        self.photo_url = attributes[:'PhotoUrl']
      end

      if attributes.has_key?(:'ProductVariations')
        if (value = attributes[:'ProductVariations']).is_a?(Array)
          self.product_variations = value
        end
      end

      if attributes.has_key?(:'QuantityAvailable')
        self.quantity_available = attributes[:'QuantityAvailable']
      end

      if attributes.has_key?(:'ProductStatus')
        self.product_status = attributes[:'ProductStatus']
      end

      if attributes.has_key?(:'BackOrderNotAllowed')
        self.back_order_not_allowed = attributes[:'BackOrderNotAllowed']
      end

      if attributes.has_key?(:'NormallyStocking')
        self.normally_stocking = attributes[:'NormallyStocking']
      end

      if attributes.has_key?(:'Discontinued')
        self.discontinued = attributes[:'Discontinued']
      end

      if attributes.has_key?(:'EndOfLife')
        self.end_of_life = attributes[:'EndOfLife']
      end

      if attributes.has_key?(:'Ncnr')
        self.ncnr = attributes[:'Ncnr']
      end

      if attributes.has_key?(:'PrimaryVideoUrl')
        self.primary_video_url = attributes[:'PrimaryVideoUrl']
      end

      if attributes.has_key?(:'Parameters')
        if (value = attributes[:'Parameters']).is_a?(Array)
          self.parameters = value
        end
      end

      if attributes.has_key?(:'BaseProductNumber')
        self.base_product_number = attributes[:'BaseProductNumber']
      end

      if attributes.has_key?(:'Category')
        self.category = attributes[:'Category']
      end

      if attributes.has_key?(:'DateLastBuyChance')
        self.date_last_buy_chance = attributes[:'DateLastBuyChance']
      end

      if attributes.has_key?(:'ManufacturerLeadWeeks')
        self.manufacturer_lead_weeks = attributes[:'ManufacturerLeadWeeks']
      end

      if attributes.has_key?(:'ManufacturerPublicQuantity')
        self.manufacturer_public_quantity = attributes[:'ManufacturerPublicQuantity']
      end

      if attributes.has_key?(:'Series')
        self.series = attributes[:'Series']
      end

      if attributes.has_key?(:'ShippingInfo')
        self.shipping_info = attributes[:'ShippingInfo']
      end

      if attributes.has_key?(:'Classifications')
        self.classifications = attributes[:'Classifications']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          description == o.description &&
          manufacturer == o.manufacturer &&
          manufacturer_product_number == o.manufacturer_product_number &&
          unit_price == o.unit_price &&
          product_url == o.product_url &&
          datasheet_url == o.datasheet_url &&
          photo_url == o.photo_url &&
          product_variations == o.product_variations &&
          quantity_available == o.quantity_available &&
          product_status == o.product_status &&
          back_order_not_allowed == o.back_order_not_allowed &&
          normally_stocking == o.normally_stocking &&
          discontinued == o.discontinued &&
          end_of_life == o.end_of_life &&
          ncnr == o.ncnr &&
          primary_video_url == o.primary_video_url &&
          parameters == o.parameters &&
          base_product_number == o.base_product_number &&
          category == o.category &&
          date_last_buy_chance == o.date_last_buy_chance &&
          manufacturer_lead_weeks == o.manufacturer_lead_weeks &&
          manufacturer_public_quantity == o.manufacturer_public_quantity &&
          series == o.series &&
          shipping_info == o.shipping_info &&
          classifications == o.classifications
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [description, manufacturer, manufacturer_product_number, unit_price, product_url, datasheet_url, photo_url, product_variations, quantity_available, product_status, back_order_not_allowed, normally_stocking, discontinued, end_of_life, ncnr, primary_video_url, parameters, base_product_number, category, date_last_buy_chance, manufacturer_lead_weeks, manufacturer_public_quantity, series, shipping_info, classifications].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DigiKey.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
