=begin
#ProductSearch Api

#ProductSearch Api

OpenAPI spec version: v4
Contact: dl_Agile_Team_B2B_API@digikey.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.43

=end

require 'date'

module DigiKey
  # Product
  class ProductPricing
    # The manufacturer part number. Note that some manufacturer part numbers may be used by multiple manufacturers for different parts.
    attr_accessor :manufacturer_product_number

    attr_accessor :manufacturer

    attr_accessor :description

    # In-stock quantity that is available for immediate shipping.
    attr_accessor :quantity_available

    # Full URL of the Digi-Key catalog page to purchase the product. This is based on your provided Locale values.
    attr_accessor :product_url

    # This product is no longer sold at DigiKey and will no longer be restocked.
    attr_accessor :is_discontinued

    # Indicates if a product is normally stocked.
    attr_accessor :normally_stocking

    # Product is obsolete
    attr_accessor :is_obsolete

    # The number of weeks expected to receive stock from manufacturer to DigiKey.
    attr_accessor :manufacturer_lead_weeks

    # The manufacturerâ€™s factory stock that can be ordered and will ship once DigiKey receives it from the manufacturer.
    attr_accessor :manufacturer_public_quantity

    # The number of products in the manufacturer's standard package.
    attr_accessor :standard_package

    # Export control class number. See documentation from the U.S. Department of Commerce.
    attr_accessor :export_control_class_number

    # Harmonized Tariff Schedule of the United States. See documentation from the U.S. International Trade Commission.
    attr_accessor :htsus_code

    # Code for Moisture Sensitivity Level of the product
    attr_accessor :moisture_sensitivity_level

    # Is Back Order not allowed? True if you cannot place a backorder; false if we will allow the product to be back-ordered.
    attr_accessor :is_bo_not_allowed

    # Is product non-cancellable and non-returnable
    attr_accessor :is_ncnr

    # The main category that the part is in(this does not include sub categories)
    attr_accessor :categories

    # Indicates if product contains lithium
    attr_accessor :contains_lithium

    # Indicates if product contains mercury
    attr_accessor :contains_mercury

    # This product is no longer manufactured and will no longer be stocked once stock is depleted.
    attr_accessor :is_end_of_life

    # Variations of the requested ProductPricing
    attr_accessor :product_variations

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'manufacturer_product_number' => :'ManufacturerProductNumber',
        :'manufacturer' => :'Manufacturer',
        :'description' => :'Description',
        :'quantity_available' => :'QuantityAvailable',
        :'product_url' => :'ProductUrl',
        :'is_discontinued' => :'IsDiscontinued',
        :'normally_stocking' => :'NormallyStocking',
        :'is_obsolete' => :'IsObsolete',
        :'manufacturer_lead_weeks' => :'ManufacturerLeadWeeks',
        :'manufacturer_public_quantity' => :'ManufacturerPublicQuantity',
        :'standard_package' => :'StandardPackage',
        :'export_control_class_number' => :'ExportControlClassNumber',
        :'htsus_code' => :'HtsusCode',
        :'moisture_sensitivity_level' => :'MoistureSensitivityLevel',
        :'is_bo_not_allowed' => :'IsBoNotAllowed',
        :'is_ncnr' => :'IsNcnr',
        :'categories' => :'Categories',
        :'contains_lithium' => :'ContainsLithium',
        :'contains_mercury' => :'ContainsMercury',
        :'is_end_of_life' => :'IsEndOfLife',
        :'product_variations' => :'ProductVariations'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'manufacturer_product_number' => :'String',
        :'manufacturer' => :'Manufacturer',
        :'description' => :'Description',
        :'quantity_available' => :'Integer',
        :'product_url' => :'String',
        :'is_discontinued' => :'BOOLEAN',
        :'normally_stocking' => :'BOOLEAN',
        :'is_obsolete' => :'BOOLEAN',
        :'manufacturer_lead_weeks' => :'String',
        :'manufacturer_public_quantity' => :'Integer',
        :'standard_package' => :'Integer',
        :'export_control_class_number' => :'String',
        :'htsus_code' => :'String',
        :'moisture_sensitivity_level' => :'String',
        :'is_bo_not_allowed' => :'BOOLEAN',
        :'is_ncnr' => :'BOOLEAN',
        :'categories' => :'Array<CategoryType>',
        :'contains_lithium' => :'BOOLEAN',
        :'contains_mercury' => :'BOOLEAN',
        :'is_end_of_life' => :'BOOLEAN',
        :'product_variations' => :'Array<ProductPricingVariation>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'ManufacturerProductNumber')
        self.manufacturer_product_number = attributes[:'ManufacturerProductNumber']
      end

      if attributes.has_key?(:'Manufacturer')
        self.manufacturer = attributes[:'Manufacturer']
      end

      if attributes.has_key?(:'Description')
        self.description = attributes[:'Description']
      end

      if attributes.has_key?(:'QuantityAvailable')
        self.quantity_available = attributes[:'QuantityAvailable']
      end

      if attributes.has_key?(:'ProductUrl')
        self.product_url = attributes[:'ProductUrl']
      end

      if attributes.has_key?(:'IsDiscontinued')
        self.is_discontinued = attributes[:'IsDiscontinued']
      end

      if attributes.has_key?(:'NormallyStocking')
        self.normally_stocking = attributes[:'NormallyStocking']
      end

      if attributes.has_key?(:'IsObsolete')
        self.is_obsolete = attributes[:'IsObsolete']
      end

      if attributes.has_key?(:'ManufacturerLeadWeeks')
        self.manufacturer_lead_weeks = attributes[:'ManufacturerLeadWeeks']
      end

      if attributes.has_key?(:'ManufacturerPublicQuantity')
        self.manufacturer_public_quantity = attributes[:'ManufacturerPublicQuantity']
      end

      if attributes.has_key?(:'StandardPackage')
        self.standard_package = attributes[:'StandardPackage']
      end

      if attributes.has_key?(:'ExportControlClassNumber')
        self.export_control_class_number = attributes[:'ExportControlClassNumber']
      end

      if attributes.has_key?(:'HtsusCode')
        self.htsus_code = attributes[:'HtsusCode']
      end

      if attributes.has_key?(:'MoistureSensitivityLevel')
        self.moisture_sensitivity_level = attributes[:'MoistureSensitivityLevel']
      end

      if attributes.has_key?(:'IsBoNotAllowed')
        self.is_bo_not_allowed = attributes[:'IsBoNotAllowed']
      end

      if attributes.has_key?(:'IsNcnr')
        self.is_ncnr = attributes[:'IsNcnr']
      end

      if attributes.has_key?(:'Categories')
        if (value = attributes[:'Categories']).is_a?(Array)
          self.categories = value
        end
      end

      if attributes.has_key?(:'ContainsLithium')
        self.contains_lithium = attributes[:'ContainsLithium']
      end

      if attributes.has_key?(:'ContainsMercury')
        self.contains_mercury = attributes[:'ContainsMercury']
      end

      if attributes.has_key?(:'IsEndOfLife')
        self.is_end_of_life = attributes[:'IsEndOfLife']
      end

      if attributes.has_key?(:'ProductVariations')
        if (value = attributes[:'ProductVariations']).is_a?(Array)
          self.product_variations = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          manufacturer_product_number == o.manufacturer_product_number &&
          manufacturer == o.manufacturer &&
          description == o.description &&
          quantity_available == o.quantity_available &&
          product_url == o.product_url &&
          is_discontinued == o.is_discontinued &&
          normally_stocking == o.normally_stocking &&
          is_obsolete == o.is_obsolete &&
          manufacturer_lead_weeks == o.manufacturer_lead_weeks &&
          manufacturer_public_quantity == o.manufacturer_public_quantity &&
          standard_package == o.standard_package &&
          export_control_class_number == o.export_control_class_number &&
          htsus_code == o.htsus_code &&
          moisture_sensitivity_level == o.moisture_sensitivity_level &&
          is_bo_not_allowed == o.is_bo_not_allowed &&
          is_ncnr == o.is_ncnr &&
          categories == o.categories &&
          contains_lithium == o.contains_lithium &&
          contains_mercury == o.contains_mercury &&
          is_end_of_life == o.is_end_of_life &&
          product_variations == o.product_variations
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [manufacturer_product_number, manufacturer, description, quantity_available, product_url, is_discontinued, normally_stocking, is_obsolete, manufacturer_lead_weeks, manufacturer_public_quantity, standard_package, export_control_class_number, htsus_code, moisture_sensitivity_level, is_bo_not_allowed, is_ncnr, categories, contains_lithium, contains_mercury, is_end_of_life, product_variations].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DigiKey.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
